name: PR Build and Deploy Check

on:
  pull_request:
    branches: ['main']

permissions:
  contents: read
  actions: write

concurrency:
  group: 'pr-build-deploy'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/app/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/app/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ./app

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        working-directory: ./app

      - name: Prepare for Deployment
        run: |
          mkdir -p ./app/out
          cp -r ./app/.next/* ./app/out/
        working-directory: ./app

      - name: Check if deploy would succeed
        run: |
          echo "Simulating deploy to check for potential issues..."
          # Simula la verificación de despliegue (aquí puedes agregar comandos específicos si es necesario)
          # Por ejemplo, podrías hacer una verificación de la configuración del archivo de despliegue
